"""
    *Routes*
    Private Routes
    This routes are private users _must be_ logged

    Equipe da Canoa -- 2024
    mgd
"""

# cSpell: ignore werkzeug wtforms uploadfile tmpl

from flask import Blueprint, render_template, request
from flask_login import login_required

from .wtforms import UploadFileForm

from ..helpers.py_helper import is_str_none_or_empty
from ..helpers.pw_helper import internal_logout, nobody_is_logged
from ..helpers.texts_helper import add_msg_success, add_msg_error
from ..helpers.route_helper import (
    bp_name,
    base_route_private,
    get_private_form_data,
    login_route,
    redirect_to,
)


# === module variables ====================================
bp_private = Blueprint(bp_name(base_route_private), base_route_private, url_prefix="")


# === routes =============================================
@bp_private.route("/home")
def home():
    """
    `home` page is the _landing page_
     for *users* (logged visitors).

    It displays the main menu.
    """

    if nobody_is_logged():
        return redirect_to(login_route(), None)

    template, _, texts = get_private_form_data("home")
    return render_template(template, **texts)


@login_required
@bp_private.route("/uploadfile", methods=["GET", "POST"])
def uploadfile():
    """
    Through this route, the user sends a zip file for validation.

    If it passes the simple validations confronted in upload_file.py,
    it is unzipped and sent to the app data_validate
    (see module `data_validate`).
    The report generated by `data_validate` is sent by e-mail and
    a result message is displayed to the user.

    Part of Canoa `File Validation` Processes
    """
    from .upload_file.process import process as upload_file_process
    from ..helpers.user_helper import LoggedUser, get_user_receipt

    if nobody_is_logged():
        return redirect_to(login_route())

    template, is_get, texts = get_private_form_data("uploadfile")
    tmpl_form = UploadFileForm(request.form)

    if not is_get:
        ve = texts["validExtensions"]
        valid_extensions = ".zip" if is_str_none_or_empty(ve) else ve.lower().split(",")
        logged_user = LoggedUser()
        file_obj = request.files[tmpl_form.filename.id] if request.files else None
        error_code, msg_error, _, data = upload_file_process(
            logged_user, file_obj, valid_extensions
        )
        file_ticket = data.get("file_ticket")
        user_receipt = get_user_receipt(file_ticket)
        if error_code == 0:
            log_msg = add_msg_success("uploadFileSuccess", texts, user_receipt, logged_user.email)
            # logger(f"Uploadfile: {log_msg}.")
        else:
            log_msg = add_msg_error(msg_error, texts, error_code)
            # logger( f"Uploadfile: {log_msg} | File stage '{_file}' |{removed} Code {task_code} | Exception Error '{except_error}'." )

    return render_template(template, form=tmpl_form, **texts)


@login_required
@bp_private.route("/changepassword", methods=["GET", "POST"])
def changepassword():
    """
    `changepassword` page, as it's name
    implies, allows the user to change
    is password, for what ever reason
    at all or none.
    Whew! That's four lines :--)
    """

    if nobody_is_logged():
        return redirect_to(login_route())
    else:
        from .access_control.password_change import do_password_change

        return do_password_change()


@bp_private.route("/logout")
def logout():
    """
    Logout the current user
    and the page is redirect to
    login
    """
    internal_logout()
    return redirect_to(login_route())


# eof
