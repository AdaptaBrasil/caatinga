
2024-03-19
   #new template `documentDisplay.html` & refactoring.
    » Visão geral, documentDisplay.html
   #Login e Registro funcionando na UI (falta [x] Li Termos)
    » Avoid print shadow document.css
    » Create authentication template
    » After login display new "window", import?

2024-03-20
   #Login, Registro, Recuperar Senha funcionando na UI (falta changepassword.html)
       » Registro: [ ] Li e ...
       » getuseremail.html
       » msg -> msgError

   #Ajustes, mas changepassword.html ainda não tem 'back form'


2024-03-21
      #Login, Registro, Recuperar Senha e ChangePassword funcionando na UI, mas falta ChangePassword com Token
      » ChangePassword, fazer token opcional e novo algoritmo (com get/post)
      » ChangePassword.html com token não tem form :-O,  sim token, OK


2024-03-22
      #Login, Registro, Recuperar Senha e ChangePassword (com e sem token) UI funcionando. Loga e desloga.
      » Geral em todos os formulários de autenticação
      » Revisão no wtforms de accounts
      » Novo mgsSuccess ('contrario do msgError'): mostra uma mensagem e so um botão (com link)
      » Registro Ok
      » Login ok
      » Logout OK
      » Change password quando logado, ok
      » getuseremail.html -> requestemail.html

2024-03-23
      #Login, Registro, Recuperar Senha, ChangePassword e ResetPassword OK! Inicio de /index
      » Renomear forms do processo de recuperação de senha (seguir padrão internacional)
         - getusermail -> passwordrecovery
         - changepassword<token> -> resetpassword/<token>
         - changepassword -> changepassword
      » Criar index com menu *muito* simples:
         - mudar senha
         - importar
         - disclaimer
         - Sobre
         - Sair/Logout
      » Formulários prontos:
        o Sem logar
         - /register
         - /login
         - /passwordrecovery
         - /resetpassword/<token> (de email)
        o Logado
         - /changepassword
         - /logout
         - importar


2024-03-25
      » Enviar token pelo email
      » Check if current_user.authentication, every where and checkout logout, refresh
      » *Apresentação N 1*, foi boa sem bugs.
      » Refazer os templates, para ter um em comum com: account.html + displayForm
      » Recriar os usuários do DB para ter:
         1. um super usuário caatinga_power
         2. um grupo: caatinga_users
         3. um usuário para ser connection string
         4. desenvolvedores: mauro + miguel
         5. as permissões concentradas em caatinga_users
      » Trazer os schemas AdaptaBrasil para o nosso banco.
      » Criar indices unique
      » Criar vw_texts para a UI
      » Novas colunas para user: last_password_date, created_at, active e real_name (To display => username)

2024-03-26
      » Ajustar no programa o desenvolvido ontem.

2024-03-27
      # Revisão de segurança e performance: app + db
      » Set default schema for DB (user is not working)
      » Usar users.search_name
      » Trigger para users colunas 'internal' (de procura/where) e manter email <- lower

2024-03-28
      #Adaptar formulário sem imagem superior, passwordrecovery e resetpassword nao funcionam.

2024-04-01
      #Formulários funcionando, configuráveis

2024-04-02
      #Formulário das Contas de Usuário revisão 2, novo background

2024-04-02
      #Display de documentos HTML (comparte dialog.tmpl com os formulários)

2024-04-03
      #Atualização de git
      » Remember-me Cookie
      » vw_textos (atualizada)
      » caatinga.css

2024-04-04
      # Diálogos e Formulários prontos com cores novas


2024-04-05
      » Backup do db
      » Planejamento de imagens para HTML + HTMLs anónimo/logado

2024-04-08
      # Inicio de Imagens para HTML

2024-04-09
      # Exibir HTML pronto
        1. Criar um alias para el documento HTML derivado do título, eg  `especificacaosetor`
        2. Salvar na tabela textos_grupo.grupo <- alias (antes: suporteusuariogrupo.nome)
        3. Salvar o documento em textos_item.nome HTML em partes: (antes: suporteusuarioelemento.tag)
            - documento.body -> body
            - document.style -> style
            - título do documento -> pageTitle (do tab browser), formTitle (do formulário)
            - lista de imagens (separadas por ,) que estão na tabela texto_item -> images
            - imagem 1 encode64 -> imagem1.png
            * se salvar as imagens diretamente no diretório, `images` pode ser '',
            * O diretório é \static\docs\{alias}\img\*
            * home/routes.py [docs] cuida de:
                - Recreate images from DB when needed and are available
                - Updates url of img tag for the folder in the HTML




      - changepassword/token -> token invalido -> solicitar um novo
      - changepassword -> request current


Significant system improvements:

 - pixel.css bug

   http://127.0.0.1:5000/requestemail <> http://127.0.0.1:5000/requestEmail

- Faltam error pages
      D:\Projects\AdaptaBrasil\Caatinga\apps\templates\home\page-404.html

- Clean caatinga.css