<!-- spell:ignore Namedtuples namedtuples namedtuple mypy
Which is the better class/dict/tuple in python in order to has editor hints?


All three - classes, dictionaries, and tuples - in Python can benefit from editor hints, but their strengths differ:

* **Classes:** Classes provide the most comprehensive editor hints. Since you define the structure and attributes within the class, editors can use that information to suggest methods, attributes, and their data types.

* **Dictionaries:** Dictionaries offer some level of hinting, especially with static type checkers like mypy. You can specify the expected data types for keys and values, allowing the editor to suggest valid options and flag potential type errors.

* **Tuples:** Tuples provide limited editor hints by default. However, you can leverage type annotations to specify the expected element types within the tuple. This enables the editor to offer suggestions based on those types.

Here's a quick breakdown:

- **Best for full-fledged hints:** Class
- **Good for basic type hints:** Dictionary (with static type checkers)
- **Limited hints, improvable with annotations:** Tuple

**Additional Option: Namedtuples**

- Consider using `namedtuple` from the `collections` module. It creates a tuple-like object with named fields, improving readability and offering some editor hints similar to classes.


Ultimately, the best choice depends on your specific use case. If you need a structured data type with methods and well-defined attributes, a class is ideal. If you just need a collection of key-value pairs with potential type checking, a dictionary with static type checking can work. And for simple, immutable data sequences, tuples with type annotations provide some level of hinting.

=============================================
Python 3.5+
from typing import NamedTuple

# Namedtuple with type hints
Book = NamedTuple("Book", title=str, author=str, year=int)

# Create a typed book instance
book1: Book = Book(title="The Martian", author="Andy Weir", year=2011)

# Type checking ensures valid data types
# book1.title = 10  # This would cause a type error
=============================================
Namedtuples in Python are a convenient way to create custom data structures that combine the benefits of tuples and classes. Here's a quick overview:

* **Creation:** You use the `namedtuple` function from the `collections` module. It takes two arguments:
    * A name for your namedtuple
    * A comma-separated list of field names

* **Benefits:**
    * **Readability:** Namedtuples provide named fields instead of positional indexing like regular tuples, making your code easier to understand.
    * **Editor Hints:** Similar to classes, namedtuples can benefit from editor hints based on the defined field names.

* **Usage:**
    * Access elements using dot notation with the field name (e.g., `my_tuple.field_name`).
    * Namedtuples are immutable (unchangeable) like regular tuples.

**Example:**

```python
from collections import namedtuple

# Create a namedtuple for book details
Book = namedtuple('Book', ['title', 'author', 'year'])

# Create a book instance
book1 = Book(title="The Hitchhiker's Guide to the Galaxy", author="Douglas Adams", year=1979)

# Access elements using dot notation
print(book1.title)  # Output: The Hitchhiker's Guide to the Galaxy
```

Namedtuples are a good choice for representing small, fixed sets of data with clear meaning for each field. They offer a balance between the simplicity of tuples and the structure of classes.










Arguments fpr call proc

There are actually a few different terms used to describe the parameters you mentioned in your example:

* **Flags:**  These are single letters or short words prefixed with a single or double dash (`-` or `--`). They typically enable or disable a specific feature without requiring an additional value. In your example, `--debug` is a flag.

* **Options:** These are more general terms for parameters that control a program's behavior. They can be flags, but they can also be named parameters that require a value.  Both `--debug` and `--input_folder` could be considered options in this context.

* **Arguments:** This is a broad term that encompasses all the data passed to a program on the command line, including flags, options, and positional arguments (which we'll discuss next).

* **Named arguments:**  These are options that explicitly specify the name of the parameter they are providing a value for.  In your example, `--input_folder` is a named argument, followed by its value `'d:\data\in'`.

* **Positional arguments:** These are arguments that are interpreted based on their position in the command line.  For example, some programs might take a filename as a positional argument, and the program would expect the first item after the program name to be the filename.  Your example doesn't show any positional arguments, but they are another common type of parameter.


So, there isn't a single special name for parameters like `--input_folder` that require a value. They can be called named arguments or options depending on the context.





** check a class *

 if hasattr(e, 'status_code'):
    status_code = e.status_code
    print(f"Status code: {status_code}")


 getattr(e, 'status_code', None)

  def get_class_docstring(cls):
  """
  Returns the docstring (if any) associated with a class.
  """
  return cls.__doc__

  def get_class_public_methods(cls):
  """
  Returns a list of all public methods (those not starting with underscores)
  defined in a class.
  """
  return [attr for attr in dir(cls) if callable(getattr(cls, attr)) and not attr.startswith('__')]

  class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"Name: {self.name}, Age: {self.age}"

